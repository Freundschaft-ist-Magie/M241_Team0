@page "/"
@using M241.Server.Data
@using M241.Server.Data.Models
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<AeroSenseDbContext> contextFactory
@inject DialogService DialogService
<PageTitle>Dashboard</PageTitle>
<h3>Rooms</h3>

<RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
Data="@RoomDatas" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
    <Columns>
        <RadzenDataGridColumn Property="@nameof(RoomData.Id)" Filterable="false" Title="ID" Frozen="true" Width="80px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn Property="@nameof(RoomData.Temperature)" Title="Temperatur" Frozen="true" Width="160px" />
        <RadzenDataGridColumn Property="@nameof(RoomData.Pressure)" Title="Druck" Frozen="true" Width="160px" />
        <RadzenDataGridColumn Property="@nameof(RoomData.Gas)" Title="Gas" Frozen="true" Width="160px" />
        <RadzenDataGridColumn Property="@nameof(RoomData.Humidity)" Title="Feuchtigkeit" Frozen="true" Width="160px" />
        <RadzenDataGridColumn Property="@nameof(RoomData.RoomId)" Title="Client Id" Width="160px" />
    </Columns>
</RadzenDataGrid>
<Statstic RoomDatas="StatisticRoomDatas" />
<RadzenButton ButtonStyle="ButtonStyle.Danger" Click="ResetDatabase">Reset Database</RadzenButton>

@code {
    List<RoomData> RoomDatas { get; set; }
    List<RoomData> StatisticRoomDatas { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
        using var context = await contextFactory.CreateDbContextAsync();
        RoomDatas = await context.RoomData.ToListAsync();
        StatisticRoomDatas = RoomDatas.Take(100).ToList();
    }

    async Task ResetDatabase(){
        var result = await DialogService.Confirm("Datenbank komplett zurücksetzen?", "Löschen", new ConfirmOptions() { OkButtonText = "Ja", CancelButtonText = "Nein" });
        if(result != null && result == true){
            using var context = await contextFactory.CreateDbContextAsync();
            context.RoomData.RemoveRange(context.RoomData);
            context.Rooms.RemoveRange(context.Rooms);
            context.SaveChanges();
            RoomDatas = new();
            StatisticRoomDatas = new();
        }
    }
}
